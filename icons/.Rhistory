data
}
long = makeint(long)
long$id = as.numeric(factor(long$id))
nospec = long[ long$variable %in% c("accur", "sens"),]
long = long[ long$variable != "jaccard", ]
long = long[ long$variable %in% c("sens", "spec", "accur", "dice"),]
long$variable = revalue(long$variable, c("sens" = "Sensitivity",
"spec" = "Specificity",
"accur" = "Accuracy",
"dice" = "Dice Similarity Index"))
long$value = as.numeric(as.character(long$value))
xlong = long
## ----CT_Skull_Stripping_Figure2, fig.height=7, fig.width=7, dpi = 600, fig.dev="png", fig.cap=CT_Skull_Stripping_Figure2----
#g = qplot(x = id, y = value, facets = smooth ~ variable , data = long,
#  colour=int)
#g
long = long[ !long$variable %in% c("truevol", "estvol"), ]
long$v2 = long$variable
slong = long[ long$v2 %in% c("Sensitivity", "Specificity"), ]
tsize = 16
pngname = file.path(figdir, "All_Outcomes_Figure2.png")
png(pngname, res=600, height=7, width=7, units= "in")
g = qplot(x = variable, y = value,
data = xlong[ xlong$smooth == "Smoothed" & long$int %in% 0.01, ],
geom=c("boxplot")) +
ggtitle(paste0(
"Boxplot of Performance of \nAutomatic vs. Manual\nSkull Stripping (N = ",
N, ")")) +
ylab("Value") +
xlab("Performance Measure") +
theme(legend.position = c(.5, .5),
legend.background = element_rect(fill="transparent"),
legend.key = element_rect(fill="transparent",
color="transparent"),
legend.text = element_text(size=tsize+2),
legend.title = element_text(size=tsize),
title = element_text(size=tsize),
strip.text = element_text(size = tsize+4),
axis.text  = element_text(size=tsize-2)) +
scale_y_continuous(limits=c(0.95, 1))
# d = data.frame(label="A", smooth="Unsmoothed")
# g = g + geom_text(data=d, x = 4, y = 0.2, size=20,
#                   aes(label=label), colour="black")
print(g)
dev.off()
pngname = file.path(figdir, "All_Outcomes_Figure.png")
png(pngname, res=600, height=7, width=7, units= "in")
print({g + scale_y_continuous(limits=c(0, 1)) })
dev.off()
ct <- c("Diagnostic", "Houndsfield Units", "One exists", "Measures humans/rooms/beds", "?")
mri <- c("Diagnostic/Research", "Arbitrary", "MNI Standard", "Measures Humans", "Many")
names <- c("Domain", "Units", "Template", "Measures", "Methods")
df <- data.frame(CT=ct, MRI=mri)
rownames(df) <- names
pander(df)
library(pander)
pander(df)
#############
#
##############
library(reshape2)
library(plyr)
library(dplyr)
library(lubridate)
library(hflights)
date_str = "2015-May-02"
date_str2 = "2015/May/02"
d = as.Date(date_str, format = "%Y-%b-%d")
d2 = as.Date(date_str, format = "%Y/%b/%d")
dd = ymd(date_str)
ymd(date_str2)
ydm("2015-02-05")
date_str = "2015-May-02 00:23:15"
date_str = "2015May02"
ymd_hms(date_str)
# ?sprintf
# %s - string
# %02.0f
# sprintf("2015-05-%02.0f", 1:31)
df = data.frame(day =
rep(paste0("2015-05-", 1:31),
10),
id = rep(1:10, each=31),
stringsAsFactors = FALSE)
# deleting rows
s = sample(nrow(df), size = 20)
df = df[-s, ]
#############
#
##############
library(reshape2)
library(plyr)
library(dplyr)
library(lubridate)
library(hflights)
date_str = "2015-May-02"
date_str2 = "2015/May/02"
d = as.Date(date_str, format = "%Y-%b-%d")
d2 = as.Date(date_str, format = "%Y/%b/%d")
dd = ymd(date_str)
ymd(date_str2)
ydm("2015-02-05")
date_str = "2015-May-02 00:23:15"
date_str = "2015May02"
ymd_hms(date_str)
# ?sprintf
# %s - string
# %02.0f
# sprintf("2015-05-%02.0f", 1:31)
df = data.frame(day =
rep(paste0("2015-05-", 1:31),
10),
id = rep(1:10, each=31),
stringsAsFactors = FALSE)
# deleting rows
s = sample(nrow(df), size = 20)
df = df[-s, ]
df$day = ymd(df$day)
?ddpyl
?ddply
?apply
lapply
tapply
?ddply
df = data.frame(day =
rep(paste0("2015-05-", 1:31),
10),
id = rep(1:10, each=31),
stringsAsFactors = FALSE)
# deleting rows
s = sample(nrow(df), size = 20)
df = df[-s, ]
df$day = ymd(df$day)
df = ddply(df, .(id), function(x){
x$day_from_baseline = difftime(df$day, df$day[1])
x
})
df = data.frame(day =
rep(paste0("2015-05-", 1:31),
10),
id = rep(1:10, each=31),
stringsAsFactors = FALSE)
# deleting rows
s = sample(nrow(df), size = 20)
df = df[-s, ]
df$day = ymd(df$day)
df = ddply(df, .(id), function(x){
x$day_from_baseline = difftime(x$day, x$day[1])
x
})
head(df)
df = data.frame(day =
rep(paste0("2015-05-", 1:31),
10),
id = rep(1:10, each=31),
stringsAsFactors = FALSE)
# deleting rows
s = sample(nrow(df), size = 20)
df = df[-s, ]
df$day = ymd(df$day)
df = ddply(df, .(id), function(x){
x$day_from_baseline = difftime(x$day, x$day[1],
units = "days")
x
})
head(df)
df = data.frame(day =
rep(paste0("2015-05-", 1:31),
10),
id = rep(1:10, each=31),
stringsAsFactors = FALSE)
# deleting rows
s = sample(nrow(df), size = 20)
df = df[-s, ]
df$day = ymd(df$day)
ind = df$day == "2015-05-01" & df$id == 1
df = df[!ind,]
df = ddply(df, .(id), function(x){
x$day_from_baseline = difftime(x$day, x$day[1],
units = "days")
x
})
head(df)
df = data.frame(day =
rep(paste0("2015-05-", 1:31),
10),
id = rep(1:10, each=31),
stringsAsFactors = FALSE)
# deleting rows
s = sample(nrow(df), size = 20)
df = df[-s, ]
ind = df$day == "2015-05-1" & df$id == 1
df$day = ymd(df$day)
head(ind)
df = data.frame(day =
rep(paste0("2015-05-", 1:31),
10),
id = rep(1:10, each=31),
stringsAsFactors = FALSE)
# deleting rows
s = sample(nrow(df), size = 20)
df = df[-s, ]
ind = df$day == "2015-05-1" & df$id == 1
head(df)
head(df)
head(df$day == "2015-05-1")
head(df$day == "2015-05-1" & df$id == 1)
df = data.frame(day =
rep(paste0("2015-05-", 1:31),
10),
id = rep(1:10, each=31),
stringsAsFactors = FALSE)
# deleting rows
s = sample(nrow(df), size = 20)
df = df[-s, ]
ind = df$day == "2015-05-1" & df$id == 1
df$day = ymd(df$day)
df = df[!ind,]
head(df)
df = data.frame(day =
rep(paste0("2015-05-", 1:31),
10),
id = rep(1:10, each=31),
stringsAsFactors = FALSE)
# deleting rows
s = sample(nrow(df), size = 20)
df = df[-s, ]
ind = df$day == "2015-05-1" & df$id == 1
df$day = ymd(df$day)
df = df[!ind,]
df = ddply(df, .(id), function(x){
x$day_from_baseline = difftime(x$day, x$day[1],
units = "days")
x
})
head(df)
head(df, 20)
df = data.frame(day =
rep(paste0("2015-05-", 1:31),
10),
id = rep(1:10, each=31),
stringsAsFactors = FALSE)
# deleting rows
s = sample(nrow(df), size = 20)
df = df[-s, ]
ind = df$day == "2015-05-1" & df$id == 1
df$day = ymd(df$day)
df = df[!ind,]
df = ddply(df, .(id), function(x){
x$day_from_baseline = difftime(x$day, x$day[1],
units = "days")
x$ind = 1:nrow(x)
x
})
head(df[ df$ind != df$day_from_baseline,])
df = data.frame(day =
rep(paste0("2015-05-", 1:31),
10),
id = rep(1:10, each=31),
stringsAsFactors = FALSE)
# deleting rows
s = sample(nrow(df), size = 20)
df = df[-s, ]
ind = df$day == "2015-05-1" & df$id == 1
df$day = ymd(df$day)
df = df[!ind,]
df = ddply(df, .(id), function(x){
x$day_from_baseline = difftime(x$day, x$day[1],
units = "days")
x$ind = seq(0, nrow(x)-1)
x
})
head(df[ df$ind != df$day_from_baseline,])
head(df, 20)
class(df$day_from_baseline)
head(as.numeric(df$day_from_baseline))
df$y = rnorm(nrow(df))
library(ggplot2)
g = ggplot(aes(x = day_from_baseline, y = y,
colour = factor(id)), data = df) +
geom_line()
g
g = ggplot(aes(x = as.numeric(day_from_baseline), y = y,
colour = factor(id)), data = df) +
geom_line()
g
mat = matrix(rnorm(1440 * 60), nrow= 1440, ncol = 60)
cmat = c(mat)
cmat[1441] == mat[1,2]
cmat[1442] == mat[1,3]
cmat[1442] == mat[2,2]
df = data.frame(y = cmat, min = 1:1440)
head(df)
mat = matrix(rnorm(1440 * 60), nrow= 1440, ncol = 60)
day1 = ymd("2015-05-01")
day1+1
day1+2
day1+3
day1+3
?as.period
day1+as.period(3, unit = "days")
mat = matrix(rnorm(1440 * 60), nrow= 1440, ncol = 60)
day1 = ymd("2015-05-01")
colnames(mat) = as.period(0:59, unit = "days")
head(mat)
mat = matrix(rnorm(1440 * 60), nrow= 1440, ncol = 60)
day1 = ymd("2015-05-01")
days = day1 = as.period(0:59, unit = "days")
head(days)
mat = matrix(rnorm(1440 * 60), nrow= 1440, ncol = 60)
day1 = ymd("2015-05-01")
days = day1 + as.period(0:59, unit = "days")
head(days)
tail(days)
as.character(days[1])
mat = matrix(rnorm(1440 * 60), nrow= 1440, ncol = 60)
day1 = ymd("2015-05-01")
days = day1 + as.period(0:59, unit = "days")
colnames(mat) = as.character(days)
head(mat)
mat = matrix(rnorm(1440 * 60), nrow= 1440, ncol = 60)
day1 = ymd("2015-05-01")
days = day1 + as.period(0:59, unit = "days")
colnames(mat) = as.character(days)
cmat = c(mat)
df = data.frame(y = cmat,
min = 1:1440,
day = colnames(mat)
)
head(df)
mat = matrix(rnorm(1440 * 60), nrow= 1440, ncol = 60)
day1 = ymd("2015-05-01")
days = day1 + as.period(0:59, unit = "days")
colnames(mat) = as.character(days)
cmat = c(mat)
df = data.frame(y = cmat,
min = 1:1440,
day = rep(colnames(mat), each = 1440)
)
head(df)
mat = matrix(rnorm(1440 * 60), nrow= 1440, ncol = 60)
day1 = ymd("2015-05-01")
days = day1 + as.period(0:59, unit = "days")
colnames(mat) = as.character(days)
cmat = c(mat)
df = data.frame(y = cmat,
min = 1:1440,
day = rep(colnames(mat), each = 1440)
)
df$day = ymd(df$day)
head(df)
df$dt = df$day + as.period(df$min, units = "mins")
head(df)
df$dt = df$day + as.period(df$min, units = "min")
head(df)
?as.period
df$dt = df$day + as.period(df$min, units = "minutes")
head(df)
new_period(minute = df$min)
mat = matrix(rnorm(1440 * 60), nrow= 1440, ncol = 60)
day1 = ymd("2015-05-01")
days = day1 + as.period(0:59, unit = "days")
colnames(mat) = as.character(days)
cmat = c(mat)
df = data.frame(y = cmat,
min = 1:1440,
day = rep(colnames(mat), each = 1440)
)
df$day = ymd(df$day)
df$dt = df$day + as.period(df$min * 60)
head(df)
xdf = df[ df$day %in% paste0("2015-05-0", 1:7), ]
head(xdf)
paste0("2015-05-0", 1:7)
xdf = df[ as.character(df$day) %in% paste0("2015-05-0", 1:7), ]
head(xdf)
g = ggplot(aes(x = min, y = y,
colour = day),
data = df) +
geom_line()
g
g = ggplot(aes(x = min, y = y,
colour = as.factor(day)),
data = xdf) +
geom_line()
g
mat = matrix(rnorm(1440 * 60), nrow= 1440, ncol = 60)
rmeans = rowMeans(mat)
cmeans = colMeans(mat)
library(matrixStats)
library(matrixStats)
mat = matrix(rnorm(1440 * 60), nrow= 1440, ncol = 60)
rmeans = rowMeans(mat)
cmeans = colMeans(mat)
plot(rmeans)
plot(rmeans, type="l")
library(geepack)
?geeglm
ct <- c("Diagnostic", "Houndsfield Units", "*One* exists", "Measures humans/rooms/beds", "Sparse")
mri <- c("Diagnostic/Research", "Arbitrary", "MNI Standard", "Measures Humans", "Many")
names <- c("Domain", "Units", "Template", "Measures", "Methods")
df <- data.frame(CT=ct, MRI=mri)
rownames(df) <- names
pander(df)
install.packages("repmis")
library(repmis)
library(plyr)
library(dplyr)
library(Hmisc)
library(psych)
library(reshape2)
library(ggplot2)
library(joineR)
install.packages("joineR")
library(MASS)
library(geepack)
setwd("~/Dropbox/jhudash/jhudashbike/icons/")
library(leaflet)
data(quakes)
# Show first 20 rows from the `quakes` dataset
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag))
library(leaflet)
data(quakes)
# Show first 20 rows from the `quakes` dataset
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag))
greenLeafIcon <- makeIcon(
iconUrl = "icon_fire.png",
iconWidth = 38, iconHeight = 95,
iconAnchorX = 22, iconAnchorY = 94
)
leaflet(data = quakes[1:4,]) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = greenLeafIcon)
library(leaflet)
data(quakes)
# Show first 20 rows from the `quakes` dataset
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag))
height = 30
greenLeafIcon <- makeIcon(
iconUrl = "icon_fire.png",
iconWidth = height, iconHeight = 95)
leaflet(data = quakes[1:4,]) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = greenLeafIcon)
library(leaflet)
data(quakes)
# Show first 20 rows from the `quakes` dataset
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag))
height = 15
greenLeafIcon <- makeIcon(
iconUrl = "icon_fire.png",
iconWidth = height, iconHeight = 95)
leaflet(data = quakes[1:4,]) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = greenLeafIcon)
library(leaflet)
data(quakes)
# Show first 20 rows from the `quakes` dataset
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag))
height = 15
greenLeafIcon <- makeIcon(
iconUrl = "icon_fire.png",
iconWidth = height, iconHeight = 30)
leaflet(data = quakes[1:4,]) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = greenLeafIcon)
library(leaflet)
data(quakes)
# Show first 20 rows from the `quakes` dataset
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag))
height = 10
greenLeafIcon <- makeIcon(
iconUrl = "icon_fire.png",
iconWidth = height, iconHeight = 30)
leaflet(data = quakes[1:4,]) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = greenLeafIcon)
library(leaflet)
data(quakes)
# Show first 20 rows from the `quakes` dataset
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag))
height = 12
greenLeafIcon <- makeIcon(
iconUrl = "icon_fire.png",
iconWidth = height, iconHeight = 30)
leaflet(data = quakes[1:4,]) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = greenLeafIcon)
library(leaflet)
data(quakes)
# Show first 20 rows from the `quakes` dataset
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag))
height = 12
greenLeafIcon <- makeIcon(
iconUrl = "icon_fire.png",
iconWidth = height, iconHeight = height)
leaflet(data = quakes[1:4,]) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = greenLeafIcon)
library(leaflet)
data(quakes)
# Show first 20 rows from the `quakes` dataset
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag))
height = 15
greenLeafIcon <- makeIcon(
iconUrl = "icon_fire.png",
iconWidth = height, iconHeight = height)
leaflet(data = quakes[1:4,]) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = greenLeafIcon)
